@use "sass:math";
/**
 * Space between columns
 */
$grid-gutter: 20px !default;
/**
  * Max width of container
  */
$grid-max-width: 1200px + ($grid-gutter * 2) !default;
/**
  * Number of total columns
  */
$grid-columns: 18 !default;
/**
  * Breakpoints
  */
$breakpoint-lg: 1280px !default;
$breakpoint-md: 1024px !default;
$breakpoint-sm: 768px !default;
$breakpoint-xs: 480px !default;

$breakpoints: (
    "lg": "(min-width: " + ($breakpoint-md + 1) + ")",
    "md": "(min-width: " + ($breakpoint-sm + 1) + ") and (max-width: " + $breakpoint-md + ")",
    "sm": "(min-width: " + ($breakpoint-xs + 1) + ") and (max-width:" + $breakpoint-sm + ")",
    "xs": "(max-width:" + $breakpoint-xs + ")"
) !default;

$breakpointsSizes: (
    "lg" $breakpoint-lg,
    "md" $breakpoint-md,
    "sm" $breakpoint-sm,
    "xs" $breakpoint-xs
) !default;
/**
 * Grid loop mixin
 */
@mixin grid-loop($name) {
    @for $i from 0 through $grid-columns {
        @if $i != 0 {
            .RQ-col-#{$name}-#{$i} {
                width: percentage(math.div($i, $grid-columns));
                .RQ-row-flex & {
                    flex-basis: percentage(math.div($i, $grid-columns));
                    max-width: percentage(math.div($i, $grid-columns));
                    width: auto;
                    float: none;
                }
            }
        }
        .RQ-col-#{$name}-offset-#{$i} {
            margin-left: percentage(math.div($i, $grid-columns));
        }
    }
}
/**
* Clearfix
*/
@mixin clearfix {
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}

/**
 * Grid scaffolding
 */
.RQ-container {
    @include clearfix;
    max-width: $grid-max-width;
    margin: 0 auto;
    padding: 0 $grid-gutter;
}
@media only screen and (max-width: #{$breakpoint-sm}) {
    .RQ-container {
        @include clearfix;
        max-width: 100%;
        margin: 0 auto;
        padding: 0;
    }
}
.RQ-row {
    list-style: none;
    margin-left: -$grid-gutter;
    &:not(.RQ-row-flex) {
        @include clearfix;
    }
    &.RQ-no-gutter {
        margin-left: 0;
    }
    &.RQ-row-flex {
        display: flex;
        flex-wrap: wrap;
    }
}

.RQ-col {
    float: left;
    padding-left: $grid-gutter;
    box-sizing: border-box;
    .RQ-no-gutter & {
        padding-left: 0;
    }
}
/**
* Columns generator
*/
@each $breakpoint in $breakpoints {
    $name: nth($breakpoint, 1);
    $declaration: nth($breakpoint, 2);

    @media only screen and #{$declaration} {
        @include grid-loop($name);
        .RQ-hidden-#{$name} {
            display: none;
        }
    }
}


//MEDIA QUERIES

//EXTRA SMALL
@mixin media-xs {
    @media screen and (max-width: $breakpoint-xs) {
        @content;
    }
}
@mixin media-over-xs {
    @media screen and (min-width: $breakpoint-xs) {
        @content;
    }
}

//SMALL
@mixin media-under-sm {
    @media screen and (max-width: $breakpoint-xs) {
        @content;
    }
}
@mixin media-sm {
    @media screen and (min-width: $breakpoint-xs) and (max-width: $breakpoint-sm) {
        @content;
    }
}
@mixin media-over-sm {
    @media screen and (min-width: $breakpoint-sm) {
        @content;
    }
}

//MEDIUM
@mixin media-under-md {
    @media screen and (max-width: $breakpoint-md) {
        @content;
    }
}
@mixin media-md {
    @media screen and (min-width: $breakpoint-sm) and (max-width: $breakpoint-md) {
        @content;
    }
}
@mixin media-over-md {
    @media screen and (min-width: $breakpoint-md) {
        @content;
    }
}

//LARGE
@mixin media-under-lg {
    @media screen and (max-width: $breakpoint-lg) {
        @content;
    }
}
@mixin media-lg {
    @media screen and (min-width: $breakpoint-md) and (max-width: $breakpoint-lg) {
        @content;
    }
}
@mixin media-over-lg {
    @media screen and (min-width: $breakpoint-lg) {
        @content;
    }
}
